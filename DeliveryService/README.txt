Инструкция по настройке и конфигурированию приложения "DeliveryService"
Описание
Это приложение предназначено для управления заказами в службе доставки. Пользователи могут просматривать и фильтровать.

Требования
Для работы приложения необходимо:

.NET 6.0 или выше
SQL Server или другой совместимый СУБД
Установка
Клонируйте репозиторий на ваш локальный компьютер:

bash
Копировать код
git clone https://github.com/Heorhi94/DeliveryService.git
cd ваш_репозиторий
Откройте проект в вашей среде разработки (например, Visual Studio или VS Code).

Установите необходимые пакеты через NuGet Package Manager или выполните команду:

bash
Копировать код
dotnet restore
Настройка базы данных
Настройте строку подключения в файле appsettings.json:

json
Копировать код
"ConnectionStrings": {
  "DeliveryServiceDb": "Server=ваш_сервер;Database=ваша_база_данных;User Id=ваш_пользователь;Password=ваш_пароль;"
}
Примените миграции для создания базы данных:

bash
Копировать код
dotnet ef migrations add InitialCreate
dotnet ef database update
Запуск приложения
Для запуска приложения выполните команду:

bash
Копировать код
dotnet run


Использование приложения
Просмотр заказов: Перейдите на главную страницу, чтобы увидеть список всех заказов.
Фильтрация заказов: Вы можете отфильтровать заказы по району и времени доставки, перейдя на страницу фильтрации.
Архитектура приложения
Контроллеры
OrdersController: Обрабатывает запросы, связанные с заказами. Методы включают:
Index: Получает и отображает все заказы.
Filter: Позволяет фильтровать заказы по определенным критериям.
Create: Создает новый заказ.
Модели
Order: Модель, представляющая заказ, с такими свойствами, как Id, Weight, District, DeliveryTime.
Контекст базы данных
ApplicationDbContext: Определяет контекст базы данных, который управляет доступом к данным через Entity Framework Core.
Сервисы
IOrderService: Интерфейс для операций над заказами. Реализация этого интерфейса (например, OrderService) отвечает за бизнес-логику, связанную с заказами.